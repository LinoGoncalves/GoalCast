[project]
name = "goalcast"
version = "0.1.0"
description = "EPL Prediction Engine with Advanced Statistical Modeling and LLM Interpretation"
authors = [
    {name = "Lino Goncalves", email = "your-email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
keywords = ["epl", "prediction", "statistics", "machine-learning", "sports-analytics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core data processing
    "pandas>=2.2.0",
    "polars>=0.20.0",
    "numpy>=1.26.0",

    # Statistical modeling
    "scikit-learn>=1.4.0",
    "scipy>=1.12.0",
    "statsmodels>=0.14.0",

    # Deep learning
    "torch>=2.2.0",

    # API & Web
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",

    # UI
    "streamlit>=1.31.0",

    # Data fetching & scraping
    "httpx>=0.27.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=5.1.0",

    # Monitoring & Observability
    "prometheus-client>=0.20.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "loguru>=0.7.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.98.0",

    # Code quality
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",

    # Security scanning (ASH v3)
    "bandit>=1.7.0",
    "semgrep>=1.60.0",

    # Type stubs
    "pandas-stubs>=2.1.0",
    "types-requests>=2.31.0",
    "types-beautifulsoup4>=4.12.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=2.0.0",
]

ml = [
    # Bayesian modeling
    "pymc>=5.10.0",
    "arviz>=0.17.0",

    # Advanced optimization
    "optuna>=3.5.0",

    # Feature engineering
    "category-encoders>=2.6.0",
]

[project.urls]
Homepage = "https://github.com/LinoGoncalves/GoalCast"
Documentation = "https://github.com/LinoGoncalves/GoalCast/wiki"
Repository = "https://github.com/LinoGoncalves/GoalCast"
Issues = "https://github.com/LinoGoncalves/GoalCast/issues"

[project.scripts]
goalcast = "goalcast.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/goalcast"]

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pytest-cov>=7.0.0",
    "pytest-asyncio>=1.2.0",
    "pytest-mock>=3.15.1",
    "hypothesis>=6.140.2",
]

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # function calls in argument defaults
    "B905",  # zip strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101"]  # Allow unused args and asserts in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "statsmodels.*",
    "streamlit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=goalcast",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "simulation: Monte Carlo simulation tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101", "B601"]
